@use "sass:map";
@use "@angular/material" as mat;

@include mat.core();

// https://material.angular.io/guide/duplicate-theming-styles#disabling-duplication-warnings
mat.$theme-ignore-duplication-warnings: true;

$custom-primary-palette: (
    50: #e6ebf6,
    100: #c0cee7,
    200: #96add8,
    300: #6c8cc8,
    400: #4d74bc,
    500: #2d5bb0,
    600: #2853a9,
    700: #2249a0,
    800: #1c4097,
    900: #112f87,
    A100: #b9c9ff,
    A200: #86a1ff,
    A400: #5379ff,
    A700: #3a65ff,
    contrast: (
        50: rgba(black, 0.87),
        100: rgba(black, 0.87),
        200: rgba(black, 0.87),
        300: rgba(black, 0.87),
        400: white,
        500: white,
        600: white,
        700: white,
        800: white,
        900: white,
        A100: rgba(black, 0.87),
        A200: rgba(black, 0.87),
        A400: white,
        A700: white,
    ),
);

$custom-accent-palette: (
    50: #fffae0,
    100: #fff3b3,
    200: #ffeb80,
    300: #ffe34d,
    400: #ffdd26,
    500: #ffd700,
    600: #ffd300,
    700: #ffcd00,
    800: #ffc700,
    900: #ffbe00,
    A100: #ffffff,
    A200: #fffbf2,
    A400: #ffecbf,
    A700: #ffecbf,
    contrast: (
        50: rgba(black, 0.87),
        100: rgba(black, 0.87),
        200: rgba(black, 0.87),
        300: rgba(black, 0.87),
        400: rgba(black, 0.87),
        500: rgba(black, 0.87),
        600: rgba(black, 0.87),
        700: rgba(black, 0.87),
        800: rgba(black, 0.87),
        900: rgba(black, 0.87),
        A100: rgba(black, 0.87),
        A200: rgba(black, 0.87),
        A400: rgba(black, 0.87),
        A700: rgba(black, 0.87),
    ),
);

$primary-palette: mat.define-palette($custom-primary-palette, 400, 200, 800);
$accent-palette: mat.define-palette($custom-accent-palette, 300);
// $warn-palette: mat.define-palette(mat.$red-palette);

// Create your Sass color vars (will be available in all the project)
$primary: mat.get-color-from-palette($primary-palette, 400);
$accent: mat.get-color-from-palette($accent-palette, 500);
// $warn: mat.get-color-from-palette($warn-palette, 500);

$light-theme: mat.define-light-theme(
    (
        color: (
            primary: $primary-palette,
            accent: $accent-palette,
        ),
    )
);

$dark-theme: mat.define-dark-theme(
    (
        color: (
            primary: $primary-palette,
            accent: $accent-palette,
        ),
        // Only include `typography` and `density` in the default dark theme.
        typography: mat.define-typography-config(),
        density: 0,
    )
);

// Emit theme-dependent styles for common features used across multiple components.
@include mat.core-color($light-theme);

// Emit styles for MatButton based on `$my-theme`. Because the configuration
// passed to `define-light-theme` omits typography, `button-theme` will not
// emit any typography styles.
@include mat.all-component-themes($light-theme);

@media (prefers-color-scheme: dark) {
    // Use the `-color` mixins to only apply color styles without reapplying the same
    // typography and density styles.
    @include mat.core-theme($dark-theme);
    @include mat.all-component-themes($dark-theme);
}
